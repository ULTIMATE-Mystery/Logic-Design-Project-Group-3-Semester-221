// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_Sobel_Loop_2_proc38 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_dst_matx_rows_read_dout,
        p_dst_matx_rows_read_empty_n,
        p_dst_matx_rows_read_read,
        p_dst_matx_cols_read_dout,
        p_dst_matx_cols_read_empty_n,
        p_dst_matx_cols_read_read,
        p_dstx_V_V_dout,
        p_dstx_V_V_empty_n,
        p_dstx_V_V_read,
        p_dst_matx_data_V_address0,
        p_dst_matx_data_V_ce0,
        p_dst_matx_data_V_we0,
        p_dst_matx_data_V_d0,
        p_dst_maty_cols_read_dout,
        p_dst_maty_cols_read_empty_n,
        p_dst_maty_cols_read_read,
        p_dsty_V_V_dout,
        p_dsty_V_V_empty_n,
        p_dsty_V_V_read,
        p_dst_maty_data_V_address0,
        p_dst_maty_data_V_ce0,
        p_dst_maty_data_V_we0,
        p_dst_maty_data_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_dst_matx_rows_read_dout;
input   p_dst_matx_rows_read_empty_n;
output   p_dst_matx_rows_read_read;
input  [31:0] p_dst_matx_cols_read_dout;
input   p_dst_matx_cols_read_empty_n;
output   p_dst_matx_cols_read_read;
input  [7:0] p_dstx_V_V_dout;
input   p_dstx_V_V_empty_n;
output   p_dstx_V_V_read;
output  [18:0] p_dst_matx_data_V_address0;
output   p_dst_matx_data_V_ce0;
output   p_dst_matx_data_V_we0;
output  [7:0] p_dst_matx_data_V_d0;
input  [31:0] p_dst_maty_cols_read_dout;
input   p_dst_maty_cols_read_empty_n;
output   p_dst_maty_cols_read_read;
input  [7:0] p_dsty_V_V_dout;
input   p_dsty_V_V_empty_n;
output   p_dsty_V_V_read;
output  [18:0] p_dst_maty_data_V_address0;
output   p_dst_maty_data_V_ce0;
output   p_dst_maty_data_V_we0;
output  [7:0] p_dst_maty_data_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_dst_matx_rows_read_read;
reg p_dst_matx_cols_read_read;
reg p_dstx_V_V_read;
reg p_dst_matx_data_V_ce0;
reg p_dst_matx_data_V_we0;
reg p_dst_maty_cols_read_read;
reg p_dsty_V_V_read;
reg p_dst_maty_data_V_ce0;
reg p_dst_maty_data_V_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    p_dst_matx_rows_read_blk_n;
reg    p_dst_matx_cols_read_blk_n;
reg    p_dstx_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_22_i_reg_251;
reg    p_dst_maty_cols_read_blk_n;
reg    p_dsty_V_V_blk_n;
reg   [30:0] j2_i_reg_121;
reg   [31:0] p_dst_matx_rows_read_1_reg_206;
reg    ap_block_state1;
reg   [31:0] p_dst_matx_cols_read_1_reg_211;
wire  signed [19:0] tmp_fu_132_p1;
reg  signed [19:0] tmp_reg_216;
wire  signed [19:0] tmp_10_fu_136_p1;
reg  signed [19:0] tmp_10_reg_221;
wire   [0:0] tmp_20_i_fu_148_p2;
wire    ap_CS_fsm_state2;
wire   [30:0] i_fu_153_p2;
reg   [30:0] i_reg_230;
wire   [19:0] tmp_23_i_fu_159_p2;
reg   [19:0] tmp_23_i_reg_235;
wire   [19:0] tmp_24_i_fu_164_p2;
reg   [19:0] tmp_24_i_reg_240;
wire   [19:0] tmp_12_fu_173_p1;
reg   [19:0] tmp_12_reg_245;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_22_i_fu_177_p2;
wire   [30:0] j_fu_182_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [30:0] i1_i_reg_110;
wire    ap_CS_fsm_state5;
wire   [31:0] p_sum_cast_i_fu_192_p1;
wire   [31:0] p_sum2_cast_i_fu_201_p1;
wire   [31:0] i1_cast_i_fu_140_p1;
wire  signed [19:0] tmp_11_fu_144_p1;
wire   [31:0] j2_cast_i_fu_169_p1;
wire   [19:0] p_sum_i_fu_188_p2;
wire   [19:0] p_sum2_i_fu_197_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_20_i_fu_148_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_20_i_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((tmp_20_i_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_i_reg_110 <= i_reg_230;
    end else if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_i_reg_110 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_i_fu_177_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j2_i_reg_121 <= j_fu_182_p2;
    end else if (((tmp_20_i_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j2_i_reg_121 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_230 <= i_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_matx_cols_read_1_reg_211 <= p_dst_matx_cols_read_dout;
        p_dst_matx_rows_read_1_reg_206 <= p_dst_matx_rows_read_dout;
        tmp_10_reg_221 <= tmp_10_fu_136_p1;
        tmp_reg_216 <= tmp_fu_132_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_12_reg_245 <= tmp_12_fu_173_p1;
        tmp_22_i_reg_251 <= tmp_22_i_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_i_fu_148_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_23_i_reg_235 <= tmp_23_i_fu_159_p2;
        tmp_24_i_reg_240 <= tmp_24_i_fu_164_p2;
    end
end

always @ (*) begin
    if ((tmp_22_i_fu_177_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_20_i_fu_148_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_20_i_fu_148_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_matx_cols_read_blk_n = p_dst_matx_cols_read_empty_n;
    end else begin
        p_dst_matx_cols_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_matx_cols_read_read = 1'b1;
    end else begin
        p_dst_matx_cols_read_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_matx_data_V_ce0 = 1'b1;
    end else begin
        p_dst_matx_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_matx_data_V_we0 = 1'b1;
    end else begin
        p_dst_matx_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_matx_rows_read_blk_n = p_dst_matx_rows_read_empty_n;
    end else begin
        p_dst_matx_rows_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_matx_rows_read_read = 1'b1;
    end else begin
        p_dst_matx_rows_read_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_maty_cols_read_blk_n = p_dst_maty_cols_read_empty_n;
    end else begin
        p_dst_maty_cols_read_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_dst_maty_cols_read_read = 1'b1;
    end else begin
        p_dst_maty_cols_read_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_maty_data_V_ce0 = 1'b1;
    end else begin
        p_dst_maty_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dst_maty_data_V_we0 = 1'b1;
    end else begin
        p_dst_maty_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dstx_V_V_blk_n = p_dstx_V_V_empty_n;
    end else begin
        p_dstx_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dstx_V_V_read = 1'b1;
    end else begin
        p_dstx_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_dsty_V_V_blk_n = p_dsty_V_V_empty_n;
    end else begin
        p_dsty_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_22_i_reg_251 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_dsty_V_V_read = 1'b1;
    end else begin
        p_dsty_V_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_20_i_fu_148_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_22_i_fu_177_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_22_i_fu_177_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_22_i_reg_251 == 1'd1) & (p_dsty_V_V_empty_n == 1'b0)) | ((tmp_22_i_reg_251 == 1'd1) & (p_dstx_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_22_i_reg_251 == 1'd1) & (p_dsty_V_V_empty_n == 1'b0)) | ((tmp_22_i_reg_251 == 1'd1) & (p_dstx_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_dst_maty_cols_read_empty_n == 1'b0) | (p_dst_matx_cols_read_empty_n == 1'b0) | (p_dst_matx_rows_read_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_22_i_reg_251 == 1'd1) & (p_dsty_V_V_empty_n == 1'b0)) | ((tmp_22_i_reg_251 == 1'd1) & (p_dstx_V_V_empty_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign i1_cast_i_fu_140_p1 = i1_i_reg_110;

assign i_fu_153_p2 = (31'd1 + i1_i_reg_110);

assign j2_cast_i_fu_169_p1 = j2_i_reg_121;

assign j_fu_182_p2 = (31'd1 + j2_i_reg_121);

assign p_dst_matx_data_V_address0 = p_sum_cast_i_fu_192_p1;

assign p_dst_matx_data_V_d0 = p_dstx_V_V_dout;

assign p_dst_maty_data_V_address0 = p_sum2_cast_i_fu_201_p1;

assign p_dst_maty_data_V_d0 = p_dsty_V_V_dout;

assign p_sum2_cast_i_fu_201_p1 = p_sum2_i_fu_197_p2;

assign p_sum2_i_fu_197_p2 = (tmp_24_i_reg_240 + tmp_12_reg_245);

assign p_sum_cast_i_fu_192_p1 = p_sum_i_fu_188_p2;

assign p_sum_i_fu_188_p2 = (tmp_23_i_reg_235 + tmp_12_reg_245);

assign tmp_10_fu_136_p1 = p_dst_maty_cols_read_dout[19:0];

assign tmp_11_fu_144_p1 = i1_i_reg_110[19:0];

assign tmp_12_fu_173_p1 = j2_i_reg_121[19:0];

assign tmp_20_i_fu_148_p2 = (($signed(i1_cast_i_fu_140_p1) < $signed(p_dst_matx_rows_read_1_reg_206)) ? 1'b1 : 1'b0);

assign tmp_22_i_fu_177_p2 = (($signed(j2_cast_i_fu_169_p1) < $signed(p_dst_matx_cols_read_1_reg_211)) ? 1'b1 : 1'b0);

assign tmp_23_i_fu_159_p2 = ($signed(tmp_reg_216) * $signed(tmp_11_fu_144_p1));

assign tmp_24_i_fu_164_p2 = ($signed(tmp_10_reg_221) * $signed(tmp_11_fu_144_p1));

assign tmp_fu_132_p1 = p_dst_matx_cols_read_dout[19:0];

endmodule //a0_Sobel_Loop_2_proc38
