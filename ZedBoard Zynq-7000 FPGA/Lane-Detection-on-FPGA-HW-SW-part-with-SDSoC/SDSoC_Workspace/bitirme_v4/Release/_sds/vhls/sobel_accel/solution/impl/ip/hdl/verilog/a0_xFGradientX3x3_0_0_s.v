// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_xFGradientX3x3_0_0_s (
        ap_clk,
        ap_rst,
        t0_V,
        t2_V,
        m0_V,
        m2_V,
        b0_V,
        b2_V,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] t0_V;
input  [7:0] t2_V;
input  [7:0] m0_V;
input  [7:0] m2_V;
input  [7:0] b0_V;
input  [7:0] b2_V;
output  [7:0] ap_return;
input   ap_ce;

wire   [8:0] r_V_fu_102_p2;
reg   [8:0] r_V_reg_205;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] r_V_2_fu_116_p2;
reg   [8:0] r_V_2_reg_210;
wire   [9:0] out_pix_fu_122_p2;
reg   [9:0] out_pix_reg_215;
wire    ap_block_pp0_stage0;
wire   [8:0] M00_fu_70_p3;
wire   [8:0] M01_fu_82_p3;
wire   [8:0] lhs_V_fu_94_p1;
wire   [8:0] rhs_V_fu_98_p1;
wire   [8:0] lhs_V_2_fu_108_p1;
wire   [8:0] rhs_V_2_fu_112_p1;
wire   [9:0] M01_cast_fu_90_p1;
wire   [9:0] M00_cast_fu_78_p1;
wire   [10:0] A00_cast_fu_128_p1;
wire  signed [10:0] out_pix_cast_fu_134_p1;
wire   [10:0] out_pix_3_fu_137_p2;
wire   [10:0] S00_cast_fu_131_p1;
wire   [10:0] out_pix_4_fu_143_p2;
wire   [2:0] tmp_9_fu_161_p4;
wire   [0:0] tmp_8_fu_153_p3;
wire   [0:0] not_tmp_s_fu_177_p2;
wire   [0:0] icmp_fu_171_p2;
wire   [0:0] tmp_fu_191_p2;
wire   [7:0] p_cast_fu_183_p3;
wire   [7:0] g_x_V_fu_149_p1;

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce))) begin
        out_pix_reg_215[9 : 1] <= out_pix_fu_122_p2[9 : 1];
        r_V_2_reg_210 <= r_V_2_fu_116_p2;
        r_V_reg_205 <= r_V_fu_102_p2;
    end
end

assign A00_cast_fu_128_p1 = r_V_reg_205;

assign M00_cast_fu_78_p1 = M00_fu_70_p3;

assign M00_fu_70_p3 = {{m0_V}, {1'd0}};

assign M01_cast_fu_90_p1 = M01_fu_82_p3;

assign M01_fu_82_p3 = {{m2_V}, {1'd0}};

assign S00_cast_fu_131_p1 = r_V_2_reg_210;

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_return = ((tmp_fu_191_p2[0:0] === 1'b1) ? p_cast_fu_183_p3 : g_x_V_fu_149_p1);

assign g_x_V_fu_149_p1 = out_pix_4_fu_143_p2[7:0];

assign icmp_fu_171_p2 = (($signed(tmp_9_fu_161_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign lhs_V_2_fu_108_p1 = t0_V;

assign lhs_V_fu_94_p1 = t2_V;

assign not_tmp_s_fu_177_p2 = (tmp_8_fu_153_p3 ^ 1'd1);

assign out_pix_3_fu_137_p2 = ($signed(A00_cast_fu_128_p1) + $signed(out_pix_cast_fu_134_p1));

assign out_pix_4_fu_143_p2 = (out_pix_3_fu_137_p2 - S00_cast_fu_131_p1);

assign out_pix_cast_fu_134_p1 = $signed(out_pix_reg_215);

assign out_pix_fu_122_p2 = (M01_cast_fu_90_p1 - M00_cast_fu_78_p1);

assign p_cast_fu_183_p3 = ((not_tmp_s_fu_177_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign r_V_2_fu_116_p2 = (lhs_V_2_fu_108_p1 + rhs_V_2_fu_112_p1);

assign r_V_fu_102_p2 = (lhs_V_fu_94_p1 + rhs_V_fu_98_p1);

assign rhs_V_2_fu_112_p1 = b0_V;

assign rhs_V_fu_98_p1 = b2_V;

assign tmp_8_fu_153_p3 = out_pix_4_fu_143_p2[32'd10];

assign tmp_9_fu_161_p4 = {{out_pix_4_fu_143_p2[10:8]}};

assign tmp_fu_191_p2 = (tmp_8_fu_153_p3 | icmp_fu_171_p2);

always @ (posedge ap_clk) begin
    out_pix_reg_215[0] <= 1'b0;
end

endmodule //a0_xFGradientX3x3_0_0_s
