-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_sobel_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_src_allocatedFlag : IN STD_LOGIC_VECTOR (7 downto 0);
    p_src_rows : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_cols : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_size : IN STD_LOGIC_VECTOR (31 downto 0);
    p_src_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    p_src_data_V_ce0 : OUT STD_LOGIC;
    p_src_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_dstgx_allocatedFlag : IN STD_LOGIC_VECTOR (7 downto 0);
    p_dstgx_rows : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgx_cols : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgx_size : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgx_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    p_dstgx_data_V_ce0 : OUT STD_LOGIC;
    p_dstgx_data_V_we0 : OUT STD_LOGIC;
    p_dstgx_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_dstgy_allocatedFlag : IN STD_LOGIC_VECTOR (7 downto 0);
    p_dstgy_rows : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgy_cols : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgy_size : IN STD_LOGIC_VECTOR (31 downto 0);
    p_dstgy_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    p_dstgy_data_V_ce0 : OUT STD_LOGIC;
    p_dstgy_data_V_we0 : OUT STD_LOGIC;
    p_dstgy_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of a0_sobel_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_sobel_accel,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.888000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=3,HLS_SYN_FF=993,HLS_SYN_LUT=2071}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_Sobel_fu_78_p_src_mat_data_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_src_mat_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_src_mat_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_src_mat_data_V_we0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_src_mat_data_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_src_mat_data_V_ce1 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_src_mat_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_src_mat_data_V_we1 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_matx_data_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_dst_matx_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_matx_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_dst_matx_data_V_we0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_matx_data_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_dst_matx_data_V_ce1 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_matx_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_dst_matx_data_V_we1 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_maty_data_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_dst_maty_data_V_ce0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_maty_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_dst_maty_data_V_we0 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_maty_data_V_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_Sobel_fu_78_p_dst_maty_data_V_ce1 : STD_LOGIC;
    signal grp_Sobel_fu_78_p_dst_maty_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_Sobel_fu_78_p_dst_maty_data_V_we1 : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_done : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_start : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_ready : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_idle : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_continue : STD_LOGIC;
    signal grp_Sobel_fu_78_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_Sobel_fu_78_ap_ready : STD_LOGIC;
    signal ap_sync_grp_Sobel_fu_78_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_Sobel_fu_78_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_Sobel_fu_78_ap_done : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);

    component a0_Sobel IS
    port (
        p_src_mat_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_mat_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_src_mat_data_V_ce0 : OUT STD_LOGIC;
        p_src_mat_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_we0 : OUT STD_LOGIC;
        p_src_mat_data_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_src_mat_data_V_ce1 : OUT STD_LOGIC;
        p_src_mat_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_mat_data_V_we1 : OUT STD_LOGIC;
        p_dst_matx_rows_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dst_matx_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dst_matx_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_dst_matx_data_V_ce0 : OUT STD_LOGIC;
        p_dst_matx_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_matx_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_matx_data_V_we0 : OUT STD_LOGIC;
        p_dst_matx_data_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_dst_matx_data_V_ce1 : OUT STD_LOGIC;
        p_dst_matx_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_matx_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_matx_data_V_we1 : OUT STD_LOGIC;
        p_dst_maty_cols_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_dst_maty_data_V_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_dst_maty_data_V_ce0 : OUT STD_LOGIC;
        p_dst_maty_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_maty_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_maty_data_V_we0 : OUT STD_LOGIC;
        p_dst_maty_data_V_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        p_dst_maty_data_V_ce1 : OUT STD_LOGIC;
        p_dst_maty_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_maty_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_dst_maty_data_V_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        p_src_mat_rows_read_ap_vld : IN STD_LOGIC;
        p_src_mat_cols_read_ap_vld : IN STD_LOGIC;
        p_dst_matx_rows_read_ap_vld : IN STD_LOGIC;
        p_dst_matx_cols_read_ap_vld : IN STD_LOGIC;
        p_dst_maty_cols_read_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_Sobel_fu_78 : component a0_Sobel
    port map (
        p_src_mat_rows_read => p_src_rows,
        p_src_mat_cols_read => p_src_cols,
        p_src_mat_data_V_address0 => grp_Sobel_fu_78_p_src_mat_data_V_address0,
        p_src_mat_data_V_ce0 => grp_Sobel_fu_78_p_src_mat_data_V_ce0,
        p_src_mat_data_V_d0 => grp_Sobel_fu_78_p_src_mat_data_V_d0,
        p_src_mat_data_V_q0 => p_src_data_V_q0,
        p_src_mat_data_V_we0 => grp_Sobel_fu_78_p_src_mat_data_V_we0,
        p_src_mat_data_V_address1 => grp_Sobel_fu_78_p_src_mat_data_V_address1,
        p_src_mat_data_V_ce1 => grp_Sobel_fu_78_p_src_mat_data_V_ce1,
        p_src_mat_data_V_d1 => grp_Sobel_fu_78_p_src_mat_data_V_d1,
        p_src_mat_data_V_q1 => ap_const_lv8_0,
        p_src_mat_data_V_we1 => grp_Sobel_fu_78_p_src_mat_data_V_we1,
        p_dst_matx_rows_read => p_dstgx_rows,
        p_dst_matx_cols_read => p_dstgx_cols,
        p_dst_matx_data_V_address0 => grp_Sobel_fu_78_p_dst_matx_data_V_address0,
        p_dst_matx_data_V_ce0 => grp_Sobel_fu_78_p_dst_matx_data_V_ce0,
        p_dst_matx_data_V_d0 => grp_Sobel_fu_78_p_dst_matx_data_V_d0,
        p_dst_matx_data_V_q0 => ap_const_lv8_0,
        p_dst_matx_data_V_we0 => grp_Sobel_fu_78_p_dst_matx_data_V_we0,
        p_dst_matx_data_V_address1 => grp_Sobel_fu_78_p_dst_matx_data_V_address1,
        p_dst_matx_data_V_ce1 => grp_Sobel_fu_78_p_dst_matx_data_V_ce1,
        p_dst_matx_data_V_d1 => grp_Sobel_fu_78_p_dst_matx_data_V_d1,
        p_dst_matx_data_V_q1 => ap_const_lv8_0,
        p_dst_matx_data_V_we1 => grp_Sobel_fu_78_p_dst_matx_data_V_we1,
        p_dst_maty_cols_read => p_dstgy_cols,
        p_dst_maty_data_V_address0 => grp_Sobel_fu_78_p_dst_maty_data_V_address0,
        p_dst_maty_data_V_ce0 => grp_Sobel_fu_78_p_dst_maty_data_V_ce0,
        p_dst_maty_data_V_d0 => grp_Sobel_fu_78_p_dst_maty_data_V_d0,
        p_dst_maty_data_V_q0 => ap_const_lv8_0,
        p_dst_maty_data_V_we0 => grp_Sobel_fu_78_p_dst_maty_data_V_we0,
        p_dst_maty_data_V_address1 => grp_Sobel_fu_78_p_dst_maty_data_V_address1,
        p_dst_maty_data_V_ce1 => grp_Sobel_fu_78_p_dst_maty_data_V_ce1,
        p_dst_maty_data_V_d1 => grp_Sobel_fu_78_p_dst_maty_data_V_d1,
        p_dst_maty_data_V_q1 => ap_const_lv8_0,
        p_dst_maty_data_V_we1 => grp_Sobel_fu_78_p_dst_maty_data_V_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        p_src_mat_rows_read_ap_vld => ap_const_logic_1,
        p_src_mat_cols_read_ap_vld => ap_const_logic_1,
        p_dst_matx_rows_read_ap_vld => ap_const_logic_1,
        p_dst_matx_cols_read_ap_vld => ap_const_logic_1,
        p_dst_maty_cols_read_ap_vld => ap_const_logic_1,
        ap_done => grp_Sobel_fu_78_ap_done,
        ap_start => grp_Sobel_fu_78_ap_start,
        ap_ready => grp_Sobel_fu_78_ap_ready,
        ap_idle => grp_Sobel_fu_78_ap_idle,
        ap_continue => grp_Sobel_fu_78_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Sobel_fu_78_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Sobel_fu_78_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_Sobel_fu_78_ap_done <= ap_const_logic_0;
                elsif ((grp_Sobel_fu_78_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Sobel_fu_78_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_Sobel_fu_78_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_Sobel_fu_78_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
                    ap_sync_reg_grp_Sobel_fu_78_ap_ready <= ap_const_logic_0;
                elsif ((grp_Sobel_fu_78_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_Sobel_fu_78_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Sobel_fu_78_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Sobel_fu_78_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_sync_grp_Sobel_fu_78_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    grp_Sobel_fu_78_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sobel_fu_78_ap_ready = ap_const_logic_1)) then 
                    grp_Sobel_fu_78_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_Sobel_fu_78_ap_ready, ap_sync_grp_Sobel_fu_78_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_Sobel_fu_78_ap_ready and ap_sync_grp_Sobel_fu_78_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_Sobel_fu_78_ap_done <= (grp_Sobel_fu_78_ap_done or ap_sync_reg_grp_Sobel_fu_78_ap_done);
    ap_sync_grp_Sobel_fu_78_ap_ready <= (grp_Sobel_fu_78_ap_ready or ap_sync_reg_grp_Sobel_fu_78_ap_ready);

    grp_Sobel_fu_78_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done))) then 
            grp_Sobel_fu_78_ap_continue <= ap_const_logic_1;
        else 
            grp_Sobel_fu_78_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_Sobel_fu_78_ap_start <= grp_Sobel_fu_78_ap_start_reg;
    p_dstgx_data_V_address0 <= grp_Sobel_fu_78_p_dst_matx_data_V_address0;
    p_dstgx_data_V_ce0 <= grp_Sobel_fu_78_p_dst_matx_data_V_ce0;
    p_dstgx_data_V_d0 <= grp_Sobel_fu_78_p_dst_matx_data_V_d0;
    p_dstgx_data_V_we0 <= grp_Sobel_fu_78_p_dst_matx_data_V_we0;
    p_dstgy_data_V_address0 <= grp_Sobel_fu_78_p_dst_maty_data_V_address0;
    p_dstgy_data_V_ce0 <= grp_Sobel_fu_78_p_dst_maty_data_V_ce0;
    p_dstgy_data_V_d0 <= grp_Sobel_fu_78_p_dst_maty_data_V_d0;
    p_dstgy_data_V_we0 <= grp_Sobel_fu_78_p_dst_maty_data_V_we0;
    p_src_data_V_address0 <= grp_Sobel_fu_78_p_src_mat_data_V_address0;
    p_src_data_V_ce0 <= grp_Sobel_fu_78_p_src_mat_data_V_ce0;
end behav;
